{-# LANGUAGE GeneralizedNewtypeDeriving, TemplateHaskell #-}
module Editor.CodeEdit.ExpressionEdit.ExpressionGui.Monad
  ( ExprGuiM, run
  -- OTransaction wrappers:
  , WidgetT
  , otransaction, transaction, atEnv
  , getP, assignCursor, assignCursorPrefix
  -- 
  , AccessedVars, markVariablesAsUsed, usedVariables
  , withParamName, NameSource(..)
  , withNameFromVarRef
  , getDefName
  ) where

import Control.Applicative (Applicative, liftA2)
import Control.Monad (liftM)
import Control.Monad.Trans.Class (lift)
import Control.Monad.Trans.RWS (RWST, runRWST)
import Data.Map (Map)
import Data.Store.Guid (Guid)
import Data.Store.Transaction (Transaction)
import Editor.Anchors (ViewTag)
import Editor.OTransaction (OTransaction)
import qualified Control.Lens as Lens
import qualified Control.Lens.TH as LensTH
import qualified Control.Monad.Trans.RWS as RWS
import qualified Data.Map as Map
import qualified Data.Store.Guid as Guid
import qualified Data.Store.IRef as IRef
import qualified Editor.Anchors as Anchors
import qualified Editor.CodeEdit.Sugar as Sugar
import qualified Editor.OTransaction as OT
import qualified Graphics.UI.Bottle.Widget as Widget

type WidgetT m = OT.WidgetT ViewTag m

type AccessedVars = [Guid]

data NameGenState = NameGenState
  { ngUnusedNames :: [String]
  , ngUsedNames :: Map Guid String
  }

newtype ExprGuiM m a = ExprGuiM
  { _varAccess :: RWST NameGenState AccessedVars () (OTransaction ViewTag m) a }
  deriving (Functor, Applicative, Monad)
LensTH.makeLenses ''ExprGuiM

atEnv :: Monad m => (OT.Env -> OT.Env) -> ExprGuiM m a -> ExprGuiM m a
atEnv = Lens.over varAccess . RWS.mapRWST . OT.atEnv

run :: Monad m => ExprGuiM m a -> OTransaction ViewTag m a
run (ExprGuiM action) =
  liftM f $ runRWST action initialNameGenState ()
  where
    f (x, _, _) = x

otransaction :: Monad m => OTransaction ViewTag m a -> ExprGuiM m a
otransaction = ExprGuiM . lift

transaction :: Monad m => Transaction ViewTag m a -> ExprGuiM m a
transaction = otransaction . OT.transaction

getP :: Monad m => Anchors.MkProperty ViewTag m a -> ExprGuiM m a
getP = transaction . Anchors.getP

assignCursor :: Monad m => Widget.Id -> Widget.Id -> ExprGuiM m a -> ExprGuiM m a
assignCursor x y = atEnv $ OT.envAssignCursor x y

assignCursorPrefix :: Monad m => Widget.Id -> Widget.Id -> ExprGuiM m a -> ExprGuiM m a
assignCursorPrefix x y = atEnv $ OT.envAssignCursorPrefix x y

-- Used vars:

usedVariables
  :: Monad m
  => ExprGuiM m a -> ExprGuiM m (a, [Guid])
usedVariables = Lens.over varAccess RWS.listen

markVariablesAsUsed :: Monad m => AccessedVars -> ExprGuiM m ()
markVariablesAsUsed = ExprGuiM . RWS.tell

-- Auto-generating names

initialNameGenState :: NameGenState
initialNameGenState =
  NameGenState names Map.empty
  where
    alphabet = map (:[]) ['a'..'z']
    names = alphabet ++ liftA2 (++) names alphabet

withNewName :: Monad m => Guid -> (String -> ExprGuiM m a) -> ExprGuiM m a
withNewName guid useNewName = do
  nameGen <- ExprGuiM RWS.ask
  let
    (name : nextNames) = ngUnusedNames nameGen
    newNameGen = nameGen
      { ngUnusedNames = nextNames
      , ngUsedNames = Map.insert guid name $ ngUsedNames nameGen
      }
  ExprGuiM . RWS.local (const newNameGen) . Lens.view varAccess $ useNewName name

data NameSource = AutoGeneratedName | StoredName

withParamName :: Monad m => Guid -> ((NameSource, String) -> ExprGuiM m a) -> ExprGuiM m a
withParamName guid useNewName = do
  storedName <- transaction . Anchors.getP $ Anchors.assocNameRef guid
  -- TODO: maybe use Maybe?
  if null storedName
    then do
      existingName <- ExprGuiM $ RWS.asks (Map.lookup guid . ngUsedNames)
      let useGenName = useNewName . (,) AutoGeneratedName
      case existingName of
        Nothing -> withNewName guid useGenName
        Just name -> useGenName name
    else useNewName (StoredName, storedName)

getDefName :: Monad m => Guid -> ExprGuiM m (NameSource, String)
getDefName guid = do
  storedName <- transaction . Anchors.getP $ Anchors.assocNameRef guid
  return $
    if null storedName
    then (AutoGeneratedName, (("anon_"++) . take 6 . Guid.asHex) guid)
    else (StoredName, storedName)

withNameFromVarRef ::
  Monad m => Sugar.GetVariable -> ((NameSource, String) -> ExprGuiM m a) -> ExprGuiM m a
withNameFromVarRef (Sugar.GetParameter g) useName = withParamName g useName
withNameFromVarRef (Sugar.GetDefinition defI) useName =
  useName =<< getDefName (IRef.guid defI)
