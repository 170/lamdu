* Hole selection is immediately on first, and you can type whereever
  it is
* When anything is selected, show all the stuff that refer/define that
  same symbol
* When hole result is selected, show (with some different
  visualization) the inferred types and values due to the hole result
  are shown
* Hole allows bad results with hole to convert
* Allow delete when type-checks in some cases
* Fix the default apply form

* Layout

* Bug: <Del> on branch name does not work
  * Cursor does not move, so GUI is not regenerated, apparently. Need
    to rewrite main loop.

* Avoid name clashes in auto-names

* Instead of (VarAccess.NameSource, String) and Guid of name
  seperately, generate a Property for the name of that type? or give
  a setter instead of Guid

* Maybe the right place to detect/error about out-of-scope is
   VarAccess.withName. Can withNewName that errorizes if we have a
   Guid shadowing (should it ever happen?) and a withOldName that
   returns an OutOfScopeError-annotated name if it wasn't generated
   already.

* Type synonyms/expansions

* When using '[' or ']' to add applies, it can type-filter out the
  result we're on and lose the cursor

* Rename Data* to Expression*.

* Holes can have same IDs for same results emphasizing sameness

* DEL should probably allow lambda-unwrap (Remove lambda wrapper)

* Add JumpTo which gives a hole-like search -- that can sit in a "tab" in place of a DefinitionEdit

* LHS needs to be in infix form too

* Whenever prejumps is added/popped, we actually update in-version
  data, so it actually creates a new, undo-able version. Need to have
  the JumpBack stack actually be outside the version and in the DB to
  fix this and to make navigation (potentially) nicer when switching
  branches.

  * Jump back should be outside the source control. For this we need
    transactions inside the source control to be able to result in
    extra data outwards, beside the widget's event result.

* Projected moves:
  * Has old focal rect
  * May have "projected focal rect"
  * Gets a new "focal rect"
  * Can generate a "projected focal rect" at the projected position of the direction of the movement
    * This "projected focal rect" is to be used by same grid or any parent grid in future movements
    * This "projected focal rect" is sort of a global thing all grids write to?
    * Each grid can add a "delete my projected focal rect" thing before any child action

* ParamEdit needs to take the eventmap/actions of ExpressionEdit and
  also add them to the param via the FuncParam actions

* Fix typematic. It now triggers when things are stuck even though user unpressed the button.

-------

* 1-use wheres to Sugar as "Titled Expressions"

* Associated comment for any expression to title it? Otherwise we're
  modifying the model to add a comment

* Dapaot:
  * Add anim-id-remappings to sugar changes
  * Multi-ids

-------

* Lambda unwrap invalidates params
